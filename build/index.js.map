{"version":3,"sources":["../server/index.js"],"names":["compression","require","path","express","app","use","config","moment","rootPath","process","env","static","join","get","req","res","next","sendFile","root","url","header","updating","autoUpdateFeed","updateService","autoUpdateTime","setTimeout","runService","setInterval","deleteOldSource","json","error","serviceRunning","serviceRunnng","nextUpdate","fromNow","feeds","updatedMerge","info","map","old","item","calendar","sourceName","params","feedSource","items","console","server","createServer","set","PORT","HOST","listen","log"],"mappings":"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","file":"index.js","sourcesContent":["import { getFeedSourceInfo } from \"./db/helper\";\nimport AutoService from \"../build/src/service\";\nvar compression = require(\"compression\");\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst app = express();\napp.use(compression());\nconst config = require(\"../config/config.json\");\nconst moment = require(\"moment\");\n// require(\"../config/runDyno\");\nconst rootPath = process.env.rootPath;\n\n// setting files of static to server easily\napp.use(express.static(path.join(rootPath, \"www\")));\napp.use(express.static(path.join(rootPath, \"client\")));\napp.use(express.static(path.join(rootPath, \"store\")));\n\n// -------------import routing Include server routes as a middleware\n\napp.get(\"/\", function(req, res, next) {\n  res.sendFile(\"./index.html\", { root: rootPath });\n});\napp.get(\"/*.js\", function(req, res, next) {\n  req.url = req.url + \".gz\";\n  res.header(\"Content-Encoding\", \"gzip\");\n  next();\n});\nif (config.updating.autoUpdateFeed) {\n  const updateService = new AutoService(config.updating.autoUpdateTime); // intilize the service\n  setTimeout(() => updateService.runService(), 10000); // run the servie at initial startup\n  setInterval(() => updateService.deleteOldSource(), 60000 * 60 * 6);\n  setInterval(\n    () => updateService.runService(),\n    config.updating.autoUpdateTime * 60000\n  ); // run service at specific intercal set in config\n  app.get(\"/next_update\", function(req, res, next) {\n    res.json({\n      error: updateService.error,\n      serviceRunning: updateService.serviceRunnng,\n      nextUpdate: moment(updateService.nextUpdate).fromNow(),\n      feeds: updateService.updatedMerge\n    });\n  });\n  app.get(\"/source_info\", async function(req, res, next) {\n    let info = await getFeedSourceInfo();\n    info.map(item => {\n      let old = item[\"Item\"][\"lastFetched\"];\n      item[\"Item\"][\"lastFetched\"] = moment(old).calendar();\n    });\n    if (info) res.json(info);\n  });\n  app.get(\"/latest/:feedSource\", function(req, res, next) {\n    let sourceName = req.params.feedSource;\n    if (req.params && sourceName !== \"\" && typeof sourceName === \"string\")\n      return res.json({\n        serviceRunning: updateService.serviceRunnng,\n        nextUpdate: moment(updateService.nextUpdate).fromNow(),\n        items: updateService.updatedMerge[req.params.feedSource]\n      });\n    console.error(\"Invalid request!!\");\n    next();\n  });\n}\n\nvar server = require(\"http\").createServer(app);\napp.set(\"port\", process.env.PORT || 3000);\napp.set(\"host\", process.env.HOST || \"localhost\");\n\nserver.listen(app.get(\"port\"), function() {\n  console.log(\n    \"%s server listening at http://%s:%s\",\n    process.env.env,\n    app.get(\"host\"),\n    app.get(\"port\")\n  );\n});\n"]}