{"version":3,"sources":["../server/index.js"],"names":["AutoService","require","compression","path","express","app","use","config","moment","process","env","rootPath","join","__dirname","static","get","req","res","next","sendFile","root","updating","autoUpdateFeed","updateService","autoUpdateTime","setTimeout","runService","setInterval","deleteOldSource","info","map","old","item","calendar","json","server","createServer","NODE_ENV","start","reload","set","PORT","HOST","listen","console","log"],"mappings":"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","file":"index.js","sourcesContent":["import { getFeedSourceInfo } from \"./db/helper\";\nconst AutoService = require(\"./src/service\");\nvar compression = require(\"compression\");\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst app = express();\napp.use(compression());\nconst config = require(\"../config/config.json\");\nconst moment = require(\"moment\");\nprocess.env.rootPath = path.join(__dirname, \"..\");\nconst rootPath = process.env.rootPath;\n\n// setting files of static to server easily\napp.use(express.static(path.join(rootPath, \"client\")));\napp.use(express.static(path.join(rootPath, \"store\")));\n\n// -------------import routing Include server routes as a middleware\n\napp.get(\"/\", function(req, res, next) {\n  res.sendFile(\"./index.html\", { root: rootPath });\n});\n\nif (config.updating.autoUpdateFeed) {\n  const updateService = new AutoService(config.updating.autoUpdateTime); // intilize the service\n  setTimeout(() => updateService.runService(), 10000); // run the servie at initial startup\n  setInterval(() => updateService.deleteOldSource(), 60000 * 60 * 6);\n  setInterval(\n    () => updateService.runService(),\n    config.updating.autoUpdateTime * 60000\n  ); // run service at specific intercal set in config\n\n  app.get(\"/source_info\", async function(req, res, next) {\n    let info = await getFeedSourceInfo();\n    info.map(item => {\n      let old = item[\"Item\"][\"lastFetched\"];\n      item[\"Item\"][\"lastFetched\"] = moment(old).calendar();\n    });\n    if (info) res.json(info);\n  });\n\n  /*\n  app.get(\"/latest/:feedSource\", function(req, res, next) {\n    let sourceName = req.params.feedSource;\n    if (req.params && sourceName !== \"\" && typeof sourceName === \"string\")\n      return res.json({\n        serviceRunning: updateService.serviceRunnng,\n        nextUpdate: moment(updateService.nextUpdate).fromNow(),\n        items: updateService.updatedMerge[req.params.feedSource]\n      });\n    console.error(\"Invalid request!!\");\n    next();\n  });\n  app.get(\"/next_update\", function(req, res, next) {\n    res.json({\n      error: updateService.error,\n      serviceRunning: updateService.serviceRunnng,\n      nextUpdate: moment(updateService.nextUpdate).fromNow(),\n      feeds: updateService.updatedMerge\n    });\n  });\n  */\n} // end of #if config.update.AutoupdateFeed\n\nvar server = require(\"http\").createServer(app);\n\nif (process.env.NODE_ENV === \"development\") {\n  require(\"pretty-error\").start();\n  const reload = require(\"reload\");\n  reload(server, app);\n  require(path.join(path.join(rootPath, \"./dev-server\")))(app);\n} else {\n  app.use(express.static(path.join(rootPath, \"www\")));\n}\n\napp.set(\"port\", process.env.PORT || 3000);\napp.set(\"host\", process.env.HOST || \"localhost\");\n\nserver.listen(app.get(\"port\"), function() {\n  console.log(\n    \"%s server listening at http://%s:%s\",\n    process.env.NODE_ENV,\n    app.get(\"host\"),\n    app.get(\"port\")\n  );\n});\n"]}