{"version":3,"sources":["../../server/src/serveFeed.js"],"names":["feedSource","JSON","parse","serveFeed","sourceTitle","lastUpdate","lastFirstFeedTitle","feedManage","sourceUrl","initCollect","catch","Error","e"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AACA,IAAIA,aAAaC,KAAKC,KAAL,CAAW,0CAAX,CAAjB;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;AAKA,IAAMC,YAAY,SAAZA,SAAY,CAACC,WAAD,EAAcC,UAAd,EAA6B;AAC7C,MAAIA,WAAWD,WAAX,CAAJ,EAA6B;AAC3B,QAAIE,qBAAqB,oBAAYD,WAAWD,WAAX,EAAwB,OAAxB,CAAZ,EAA8C,CAA9C,CAAzB,CAD2B,CACgD;AAC5E;AACD,MAAIG,aAAa,0BACfH,WADe,EAEfJ,WAAWI,WAAX,EAAwBI,SAFT,EAEoB;AACnCF,oBAHe,CAAjB;AAKA,MAAIG,cAAcF,WAAWE,WAAX,GAAyBC,KAAzB,CAA+B,aAAK;AACpD,UAAMC,MAAMC,CAAN,CAAN;AACD,GAFiB,CAAlB;AAGA,SAAOH,WAAP;AACD,CAbD;;kBAeeN,S;;AAEf","file":"serveFeed.js","sourcesContent":["import CollectFeed from \"./collectFeed\";\nimport source from \"../../config/source.json\";\nlet feedSource = JSON.parse(JSON.stringify(source));\n\n/*\nconst saveFetchInfo = (sourceTitle, feedLength, fileName) => {\n  var params = {\n    TableName: \"FeedSourceInfo\",\n    Key: {\n      sourceTitle: sourceTitle\n    },\n    UpdateExpression: \"set lastFetched =:dt, feedItem = :item , fileName=:fileName\",\n    ExpressionAttributeValues: {\n      \":dt\": Date.now(),\n      \":item\": feedLength,\n      \":fileName\": fileName\n    },\n    ReturnValues: \"UPDATED_NEW\"\n  };\n  return updateItem(params);\n};\n*/\n\n/**\n * It will fetch the feeds and parse it & save it as json\n * Souce can be user specific souce or all souce which saved by defualt\n * @param {object} source\n */\nconst serveFeed = (sourceTitle, lastUpdate) => {\n  if (lastUpdate[sourceTitle]) {\n    var lastFirstFeedTitle = Object.keys(lastUpdate[sourceTitle][\"feeds\"])[0]; // title of first item of last fetched feed item\n  }\n  let feedManage = new CollectFeed(\n    sourceTitle,\n    feedSource[sourceTitle].sourceUrl, // get sourceinfo from saved json file\n    lastFirstFeedTitle\n  );\n  let initCollect = feedManage.initCollect().catch(e => {\n    throw Error(e);\n  });\n  return initCollect;\n};\n\nexport default serveFeed;\n\n/*\n  feedSource[sourceT&itle][\"lastfetch\"] = Date.now();\n  feedSource[sourceTitle][\"feedLength\"] = feedLength;\n  return new Promise((resolve, reject) => {\n    fs.writeFile(\n      path.join(rootPath, \"/feedNew.json\"),\n      JSON.stringify(feedSource),\n      (e, r) => {\n        if (e) return reject(e);\n        return resolve(true);\n      }\n    );\n  });\n  */\n"]}