{"version":3,"sources":["../../server/db/helper.js"],"names":["deletTable","dyn","tableName","deleteTable","TableName","console","log","e","putItem","table","data","Data","Item","put","r","query","condition","conditionJson","Promise","resolve","reject","IndexName","KeyConditionExpression","ExpressionAttributeValues","getItem","keyJson","get","Key","err","error","JSON","stringify","updateItem","update","params","getFeedSourceInfo","f","sourceTitle","i","promise","Object","keys","map","push","all","result"],"mappings":"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","file":"helper.js","sourcesContent":["import { dyn, docClient } from \"./initDb\";\nimport { indexName } from \"./table\";\nimport source from \"../../config/source.json\";\nexport const deletTable = (dyn, tableName) => {\n  dyn.deleteTable(\n    {\n      TableName: tableName\n    },\n    e => console.log(e)\n  );\n};\n\nexport const putItem = (dyn, table, data) => {\n  var Data = {\n    TableName: table,\n    Item: data\n  };\n  dyn.put(Data, (e, r) => console.log(e, r));\n};\n\n/**\n * query on Dyno based on condtion\n * @param {any} dyn \n * @param {any} tableName \n * @param {any} condition \n * @param {any} conditionJson \n * @returns \n */\nexport const query = (dyn, tableName, condition, conditionJson) => {\n  return new Promise((resolve, reject) => {\n    dyn.query(\n      {\n        TableName: tableName,\n        IndexName: indexName(tableName),\n        KeyConditionExpression: condition + \" = :\" + condition,\n        ExpressionAttributeValues: conditionJson\n      },\n      (e, r) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(r);\n      }\n    );\n  });\n};\n\n/* use of query\nconst userData = query(docClient, \"FeedReadMain\", \"userName\", {\n  \":userName\": \"iamanam\"\n});\n\nuserData.then(v => {\n  v[\"Items\"].forEach(function(data) {\n    console.log(data);\n  }, this);\n});\n*/\n\nexport const getItem = (TableName, keyJson) => {\n  return docClient.get(\n    {\n      TableName: TableName,\n      Key: keyJson\n    },\n    function(err, data) {\n      if (err) {\n        console.error(\n          \"Unable to read item. Error JSON:\",\n          JSON.stringify(err, null, 2)\n        );\n      } else {\n        //console.log(\"GetItem succeeded:\", JSON.stringify(data, null, 2));\n        return data;\n      }\n    }\n  );\n};\n\nexport const updateItem = params => {\n  return docClient.update(params, function(err, data) {\n    if (err) {\n      console.error(\n        \"Unable to update item. Error JSON:\",\n        JSON.stringify(err, null, 2)\n      );\n    }\n  });\n};\n\nexport const getFeedSourceInfo = async function() {\n  var data = [];\n  try {\n    var f = i => {\n      return docClient\n        .get({\n          TableName: \"FeedSourceInfo\",\n          Key: { sourceTitle: i }\n        })\n        .promise();\n    };\n    Object.keys(source).map(async function(i) {\n      data.push(f(i));\n    });\n    var result = await Promise.all(data);\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n  return result;\n};\n"]}